<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		* 제어의 역전(IoC : Inversion of Control)

		기존에는 개발자가 new를 이용하여 직접 객체를 생성하여 사용했으나,
		스프링은 스프링이 객체를 생성하고 개발자는 이미 생성된 객체를 가져다 사용한다.
		객체를 처리하는 주체가 개발자에서 스프링으로 넘어갔기 때문에 '제어의 역전'이라고 한다.
	-->

	<!-- 1.	디폴트 생성자(NoArgsConstructor) + setter
			: setter injection (세터 주입)
	-->

	<!-- 
		1)	디폴트 생성자
			<bean class="클래스명" id="객체(인스턴스)명></bean>
			<bean class="클래스명" id="객체(인스턴스)명"/>
	-->

	<bean class="com.goodee.ex01.xml01.Calculator" id="calculator1"></bean>

	<!--
		2)	setter
			<property name="필드명">
				<value>값</value>	primary type : value 태그
			</property>
			<property name="필드명">
				<ref bean="객체명"/>	reference type : ref 태그의 bean 속성
			</property>
	 -->

	 <bean class="com.goodee.ex01.xml01.EngineerCalculator" id="eCalculator1">
	 	<property name="a">				<!-- private int a; setter를 이용하여 동작 -->
	 		<value>7</value>
	 	</property>
	 	<property name="b">				<!-- private int b; setter를 이용하여 동작 -->
	 		<value>2</value>
	 	</property>
	 	<property name="calculator">	<!-- private Calculator calculator; setter를 이용하여 동작 -->
	 		<ref bean="calculator1"></ref>
	 	</property>
	 </bean>	 

	<!-- 2.	필드를 이용한 생성자(AllArgsConstructor)
			: constructor injection(생성자 주입)
	-->

</beans>